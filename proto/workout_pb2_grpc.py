# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import workout_pb2 as workout__pb2


class WorkoutServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListInProgressWorkouts = channel.unary_unary(
                '/workout.WorkoutService/ListInProgressWorkouts',
                request_serializer=workout__pb2.ListInProgressWorkoutsRequest.SerializeToString,
                response_deserializer=workout__pb2.ListInProgressWorkoutsResponse.FromString,
                )
        self.CreateWorkout = channel.unary_unary(
                '/workout.WorkoutService/CreateWorkout',
                request_serializer=workout__pb2.CreateWorkoutRequest.SerializeToString,
                response_deserializer=workout__pb2.CreateWorkoutResponse.FromString,
                )
        self.JoinWorkout = channel.unary_unary(
                '/workout.WorkoutService/JoinWorkout',
                request_serializer=workout__pb2.JoinWorkoutRequest.SerializeToString,
                response_deserializer=workout__pb2.JoinWorkoutResponse.FromString,
                )
        self.AdvanceWorkout = channel.unary_unary(
                '/workout.WorkoutService/AdvanceWorkout',
                request_serializer=workout__pb2.AdvanceWorkoutRequest.SerializeToString,
                response_deserializer=workout__pb2.AdvanceWorkoutResponse.FromString,
                )
        self.Watch = channel.unary_stream(
                '/workout.WorkoutService/Watch',
                request_serializer=workout__pb2.WatchRequest.SerializeToString,
                response_deserializer=workout__pb2.WorkoutUpdate.FromString,
                )
        self.RecordLift = channel.unary_unary(
                '/workout.WorkoutService/RecordLift',
                request_serializer=workout__pb2.RecordLiftRequest.SerializeToString,
                response_deserializer=workout__pb2.RecordLiftResponse.FromString,
                )


class WorkoutServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListInProgressWorkouts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateWorkout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinWorkout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdvanceWorkout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Watch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordLift(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkoutServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListInProgressWorkouts': grpc.unary_unary_rpc_method_handler(
                    servicer.ListInProgressWorkouts,
                    request_deserializer=workout__pb2.ListInProgressWorkoutsRequest.FromString,
                    response_serializer=workout__pb2.ListInProgressWorkoutsResponse.SerializeToString,
            ),
            'CreateWorkout': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWorkout,
                    request_deserializer=workout__pb2.CreateWorkoutRequest.FromString,
                    response_serializer=workout__pb2.CreateWorkoutResponse.SerializeToString,
            ),
            'JoinWorkout': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinWorkout,
                    request_deserializer=workout__pb2.JoinWorkoutRequest.FromString,
                    response_serializer=workout__pb2.JoinWorkoutResponse.SerializeToString,
            ),
            'AdvanceWorkout': grpc.unary_unary_rpc_method_handler(
                    servicer.AdvanceWorkout,
                    request_deserializer=workout__pb2.AdvanceWorkoutRequest.FromString,
                    response_serializer=workout__pb2.AdvanceWorkoutResponse.SerializeToString,
            ),
            'Watch': grpc.unary_stream_rpc_method_handler(
                    servicer.Watch,
                    request_deserializer=workout__pb2.WatchRequest.FromString,
                    response_serializer=workout__pb2.WorkoutUpdate.SerializeToString,
            ),
            'RecordLift': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordLift,
                    request_deserializer=workout__pb2.RecordLiftRequest.FromString,
                    response_serializer=workout__pb2.RecordLiftResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'workout.WorkoutService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkoutService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListInProgressWorkouts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workout.WorkoutService/ListInProgressWorkouts',
            workout__pb2.ListInProgressWorkoutsRequest.SerializeToString,
            workout__pb2.ListInProgressWorkoutsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateWorkout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workout.WorkoutService/CreateWorkout',
            workout__pb2.CreateWorkoutRequest.SerializeToString,
            workout__pb2.CreateWorkoutResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JoinWorkout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workout.WorkoutService/JoinWorkout',
            workout__pb2.JoinWorkoutRequest.SerializeToString,
            workout__pb2.JoinWorkoutResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdvanceWorkout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workout.WorkoutService/AdvanceWorkout',
            workout__pb2.AdvanceWorkoutRequest.SerializeToString,
            workout__pb2.AdvanceWorkoutResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Watch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/workout.WorkoutService/Watch',
            workout__pb2.WatchRequest.SerializeToString,
            workout__pb2.WorkoutUpdate.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecordLift(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/workout.WorkoutService/RecordLift',
            workout__pb2.RecordLiftRequest.SerializeToString,
            workout__pb2.RecordLiftResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
